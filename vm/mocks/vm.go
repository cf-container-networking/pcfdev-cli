// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/pivotal-cf/pcfdev-cli/vm (interfaces: VM)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/pivotal-cf/pcfdev-cli/config"
)

// Mock of VM interface
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *_MockVMRecorder
}

// Recorder for MockVM (not exported)
type _MockVMRecorder struct {
	mock *MockVM
}

func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &_MockVMRecorder{mock}
	return mock
}

func (_m *MockVM) EXPECT() *_MockVMRecorder {
	return _m.recorder
}

func (_m *MockVM) Destroy() error {
	ret := _m.ctrl.Call(_m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMRecorder) Destroy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy")
}

func (_m *MockVM) GetConfig() *config.VMConfig {
	ret := _m.ctrl.Call(_m, "GetConfig")
	ret0, _ := ret[0].(*config.VMConfig)
	return ret0
}

func (_mr *_MockVMRecorder) GetConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConfig")
}

func (_m *MockVM) Resume() error {
	ret := _m.ctrl.Call(_m, "Resume")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMRecorder) Resume() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resume")
}

func (_m *MockVM) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockVM) Status() string {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockVMRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status")
}

func (_m *MockVM) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockVM) Suspend() error {
	ret := _m.ctrl.Call(_m, "Suspend")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMRecorder) Suspend() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Suspend")
}
